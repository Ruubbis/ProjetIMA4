
XbeeController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000a6c  00000b00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800116  00800116  00000b16  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000b16  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000488f  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001536  00000000  00000000  00005637  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000029e7  00000000  00000000  00006b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000658  00000000  00000000  00009554  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001d5b  00000000  00000000  00009bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c7a  00000000  00000000  0000b907  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000368  00000000  00000000  0000e581  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	6f c0       	rjmp	.+222    	; 0xe0 <__ctors_end>
   2:	00 00       	nop
   4:	88 c0       	rjmp	.+272    	; 0x116 <__bad_interrupt>
   6:	00 00       	nop
   8:	86 c0       	rjmp	.+268    	; 0x116 <__bad_interrupt>
   a:	00 00       	nop
   c:	84 c0       	rjmp	.+264    	; 0x116 <__bad_interrupt>
   e:	00 00       	nop
  10:	82 c0       	rjmp	.+260    	; 0x116 <__bad_interrupt>
  12:	00 00       	nop
  14:	80 c0       	rjmp	.+256    	; 0x116 <__bad_interrupt>
  16:	00 00       	nop
  18:	7e c0       	rjmp	.+252    	; 0x116 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7c c0       	rjmp	.+248    	; 0x116 <__bad_interrupt>
  1e:	00 00       	nop
  20:	7a c0       	rjmp	.+244    	; 0x116 <__bad_interrupt>
  22:	00 00       	nop
  24:	78 c0       	rjmp	.+240    	; 0x116 <__bad_interrupt>
  26:	00 00       	nop
  28:	76 c0       	rjmp	.+236    	; 0x116 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	03 c3       	rjmp	.+1542   	; 0x634 <__vector_11>
  2e:	00 00       	nop
  30:	72 c0       	rjmp	.+228    	; 0x116 <__bad_interrupt>
  32:	00 00       	nop
  34:	70 c0       	rjmp	.+224    	; 0x116 <__bad_interrupt>
  36:	00 00       	nop
  38:	6e c0       	rjmp	.+220    	; 0x116 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6c c0       	rjmp	.+216    	; 0x116 <__bad_interrupt>
  3e:	00 00       	nop
  40:	6a c0       	rjmp	.+212    	; 0x116 <__bad_interrupt>
  42:	00 00       	nop
  44:	68 c0       	rjmp	.+208    	; 0x116 <__bad_interrupt>
  46:	00 00       	nop
  48:	66 c0       	rjmp	.+204    	; 0x116 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	64 c0       	rjmp	.+200    	; 0x116 <__bad_interrupt>
  4e:	00 00       	nop
  50:	62 c0       	rjmp	.+196    	; 0x116 <__bad_interrupt>
  52:	00 00       	nop
  54:	60 c0       	rjmp	.+192    	; 0x116 <__bad_interrupt>
  56:	00 00       	nop
  58:	5e c0       	rjmp	.+188    	; 0x116 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5d c0       	rjmp	.+186    	; 0x118 <__vector_23>
  5e:	00 00       	nop
  60:	5a c0       	rjmp	.+180    	; 0x116 <__bad_interrupt>
  62:	00 00       	nop
  64:	58 c0       	rjmp	.+176    	; 0x116 <__bad_interrupt>
  66:	00 00       	nop
  68:	56 c0       	rjmp	.+172    	; 0x116 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	54 c0       	rjmp	.+168    	; 0x116 <__bad_interrupt>
  6e:	00 00       	nop
  70:	52 c0       	rjmp	.+164    	; 0x116 <__bad_interrupt>
  72:	00 00       	nop

00000074 <XbeeController_ProductString>:
  74:	16 03 52 00 65 00 6c 00 61 00 79 00 42 00 6f 00     ..R.e.l.a.y.B.o.
  84:	61 00 72 00 64 00 00 00                             a.r.d...

0000008c <XbeeController_ManufacturerString>:
  8c:	12 03 50 00 6f 00 6c 00 79 00 74 00 65 00 63 00     ..P.o.l.y.t.e.c.
  9c:	68 00 00 00                                         h...

000000a0 <XbeeController_LanguageString>:
  a0:	04 03 09 04                                         ....

000000a4 <XbeeController_ConfigurationDescriptor>:
  a4:	09 02 29 00 02 01 00 c0 fa 09 04 00 00 01 ff 00     ..).............
  b4:	00 00 07 05 81 03 08 00 05 09 04 01 00 01 ff 00     ................
  c4:	00 00 07 05 02 03 08 00 05                          .........

000000cd <XbeeController_DeviceDescriptor>:
  cd:	12 01 10 01 ff 00 00 08 04 05 01 22 00 02 01 02     ..........."....
  dd:	03 01 00                                            ...

000000e0 <__ctors_end>:
  e0:	11 24       	eor	r1, r1
  e2:	1f be       	out	0x3f, r1	; 63
  e4:	cf ef       	ldi	r28, 0xFF	; 255
  e6:	d2 e0       	ldi	r29, 0x02	; 2
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	cd bf       	out	0x3d, r28	; 61

000000ec <__do_copy_data>:
  ec:	11 e0       	ldi	r17, 0x01	; 1
  ee:	a0 e0       	ldi	r26, 0x00	; 0
  f0:	b1 e0       	ldi	r27, 0x01	; 1
  f2:	ec e6       	ldi	r30, 0x6C	; 108
  f4:	fa e0       	ldi	r31, 0x0A	; 10
  f6:	02 c0       	rjmp	.+4      	; 0xfc <__do_copy_data+0x10>
  f8:	05 90       	lpm	r0, Z+
  fa:	0d 92       	st	X+, r0
  fc:	a6 31       	cpi	r26, 0x16	; 22
  fe:	b1 07       	cpc	r27, r17
 100:	d9 f7       	brne	.-10     	; 0xf8 <__do_copy_data+0xc>

00000102 <__do_clear_bss>:
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	a6 e1       	ldi	r26, 0x16	; 22
 106:	b1 e0       	ldi	r27, 0x01	; 1
 108:	01 c0       	rjmp	.+2      	; 0x10c <.do_clear_bss_start>

0000010a <.do_clear_bss_loop>:
 10a:	1d 92       	st	X+, r1

0000010c <.do_clear_bss_start>:
 10c:	a3 32       	cpi	r26, 0x23	; 35
 10e:	b2 07       	cpc	r27, r18
 110:	e1 f7       	brne	.-8      	; 0x10a <.do_clear_bss_loop>
 112:	93 d0       	rcall	.+294    	; 0x23a <main>
 114:	a9 c4       	rjmp	.+2386   	; 0xa68 <_exit>

00000116 <__bad_interrupt>:
 116:	74 cf       	rjmp	.-280    	; 0x0 <__vectors>

00000118 <__vector_23>:
uint8_t msg_A_OFF[DATA_MAX]= {0x5B,0x41,0x2D,0x30,0x5D};
uint8_t msg_B_OFF[DATA_MAX]= {0x5B,0x42,0x2D,0x30,0x5D};


ISR(USART1_RX_vect)
{
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	8f 93       	push	r24
	data_send = UDR1;
 124:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__EEPROM_REGION_LENGTH__+0x7f00ce>
 128:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
	state_send = 1;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <state_send>
}
 132:	8f 91       	pop	r24
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <Send_Msg_Serial>:

void Send_Msg_Serial(uint8_t msg[DATA_MAX]){
 13e:	9c 01       	movw	r18, r24
 140:	2b 5f       	subi	r18, 0xFB	; 251
 142:	3f 4f       	sbci	r19, 0xFF	; 255
	int i;
	for(i=0;i<DATA_MAX;i++){
		Serial_SendByte(msg[i]);	
 144:	fc 01       	movw	r30, r24
 146:	41 91       	ld	r20, Z+
 148:	cf 01       	movw	r24, r30
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
 14a:	50 91 c8 00 	lds	r21, 0x00C8	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
 14e:	55 ff       	sbrs	r21, 5
 150:	fc cf       	rjmp	.-8      	; 0x14a <Send_Msg_Serial+0xc>
				UDR1 = DataByte;
 152:	40 93 ce 00 	sts	0x00CE, r20	; 0x8000ce <__EEPROM_REGION_LENGTH__+0x7f00ce>
	state_send = 1;
}

void Send_Msg_Serial(uint8_t msg[DATA_MAX]){
	int i;
	for(i=0;i<DATA_MAX;i++){
 156:	82 17       	cp	r24, r18
 158:	93 07       	cpc	r25, r19
 15a:	a1 f7       	brne	.-24     	; 0x144 <Send_Msg_Serial+0x6>
		Serial_SendByte(msg[i]);	
	}
}
 15c:	08 95       	ret

0000015e <SetupHardware>:
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
 15e:	87 e6       	ldi	r24, 0x67	; 103
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__EEPROM_REGION_LENGTH__+0x7f00cd>
 166:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__EEPROM_REGION_LENGTH__+0x7f00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
 16a:	86 e0       	ldi	r24, 0x06	; 6
 16c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
 170:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
 174:	e9 ec       	ldi	r30, 0xC9	; 201
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	88 e1       	ldi	r24, 0x18	; 24
 17a:	80 83       	st	Z, r24

				DDRD  |= (1 << 3);
 17c:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
 17e:	5a 9a       	sbi	0x0b, 2	; 11

void SetupHardware(void)
{
	Serial_Init(9600,false);
	UCSR1B |= (1 << RXCIE1);
 180:	80 81       	ld	r24, Z
 182:	80 68       	ori	r24, 0x80	; 128
 184:	80 83       	st	Z, r24
       	// Enable the USART Receive Complete interrupt (USART_RXC)
	DDRD |= 0x30;
 186:	8a b1       	in	r24, 0x0a	; 10
 188:	80 63       	ori	r24, 0x30	; 48
	USB_Init();
 18a:	8a b9       	out	0x0a, r24	; 10
 18c:	44 c2       	rjmp	.+1160   	; 0x616 <USB_Init>

0000018e <SendNextReport>:
}

void SendNextReport(void)
{
	if(state_send)
 18e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <state_send>
 192:	88 23       	and	r24, r24
 194:	a9 f0       	breq	.+42     	; 0x1c0 <SendNextReport+0x32>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 19c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		Endpoint_SelectEndpoint(XC_IN_EPADDR);

		if (Endpoint_IsReadWriteAllowed())
 1a0:	85 ff       	sbrs	r24, 5
 1a2:	0c c0       	rjmp	.+24     	; 0x1bc <SendNextReport+0x2e>
		{
			Endpoint_Write_Stream_LE(&data_send, sizeof(uint8_t), NULL);
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	86 e1       	ldi	r24, 0x16	; 22
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	79 d0       	rcall	.+242    	; 0x2a4 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 1b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 1b6:	8e 77       	andi	r24, 0x7E	; 126
 1b8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			Endpoint_ClearIN();
		}	
		
		state_send = 0;
 1bc:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <state_send>
 1c0:	08 95       	ret

000001c2 <ReceiveNextReport>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 1c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>


void ReceiveNextReport(void)
{
	Endpoint_SelectEndpoint(XC_OUT_EPADDR);
	if (Endpoint_IsOUTReceived()){
 1cc:	82 ff       	sbrs	r24, 2
 1ce:	20 c0       	rjmp	.+64     	; 0x210 <ReceiveNextReport+0x4e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 1d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsReadWriteAllowed()){
 1d4:	85 ff       	sbrs	r24, 5
 1d6:	1c c0       	rjmp	.+56     	; 0x210 <ReceiveNextReport+0x4e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 1d8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			uint8_t LEDReport = Endpoint_Read_8();
			switch(LEDReport){
 1dc:	82 34       	cpi	r24, 0x42	; 66
 1de:	69 f0       	breq	.+26     	; 0x1fa <ReceiveNextReport+0x38>
 1e0:	28 f4       	brcc	.+10     	; 0x1ec <ReceiveNextReport+0x2a>
 1e2:	81 34       	cpi	r24, 0x41	; 65
 1e4:	81 f4       	brne	.+32     	; 0x206 <ReceiveNextReport+0x44>
				case 0x41:
					Send_Msg_Serial(msg_A_ON);
 1e6:	8f e0       	ldi	r24, 0x0F	; 15
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	0c c0       	rjmp	.+24     	; 0x204 <ReceiveNextReport+0x42>
{
	Endpoint_SelectEndpoint(XC_OUT_EPADDR);
	if (Endpoint_IsOUTReceived()){
		if (Endpoint_IsReadWriteAllowed()){
			uint8_t LEDReport = Endpoint_Read_8();
			switch(LEDReport){
 1ec:	83 34       	cpi	r24, 0x43	; 67
 1ee:	41 f0       	breq	.+16     	; 0x200 <ReceiveNextReport+0x3e>
 1f0:	84 34       	cpi	r24, 0x44	; 68
 1f2:	49 f4       	brne	.+18     	; 0x206 <ReceiveNextReport+0x44>
					break;
				case 0x43:
					Send_Msg_Serial(msg_B_ON);
					break;
				case 0x44:
					Send_Msg_Serial(msg_B_OFF);
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	05 c0       	rjmp	.+10     	; 0x204 <ReceiveNextReport+0x42>
			switch(LEDReport){
				case 0x41:
					Send_Msg_Serial(msg_A_ON);
					break;
				case 0x42:
					Send_Msg_Serial(msg_A_OFF);
 1fa:	85 e0       	ldi	r24, 0x05	; 5
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <ReceiveNextReport+0x42>
					break;
				case 0x43:
					Send_Msg_Serial(msg_B_ON);
 200:	8a e0       	ldi	r24, 0x0A	; 10
					break;
				case 0x44:
					Send_Msg_Serial(msg_B_OFF);
 202:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 204:	9c df       	rcall	.-200    	; 0x13e <Send_Msg_Serial>
 206:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 20a:	8b 77       	andi	r24, 0x7B	; 123
 20c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 210:	08 95       	ret

00000212 <PAD_Task>:

	
void PAD_Task(void)
{
	
	if (USB_DeviceState != DEVICE_STATE_Configured)
 212:	8e b3       	in	r24, 0x1e	; 30
 214:	84 30       	cpi	r24, 0x04	; 4
	  return;
	
	SendNextReport();
	ReceiveNextReport();
 216:	11 f4       	brne	.+4      	; 0x21c <PAD_Task+0xa>
 218:	ba df       	rcall	.-140    	; 0x18e <SendNextReport>
 21a:	d3 cf       	rjmp	.-90     	; 0x1c2 <ReceiveNextReport>
 21c:	08 95       	ret

0000021e <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 21e:	42 e0       	ldi	r20, 0x02	; 2
 220:	61 ec       	ldi	r22, 0xC1	; 193
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	3c d1       	rcall	.+632    	; 0x49e <Endpoint_ConfigureEndpoint_Prv>
 226:	42 e0       	ldi	r20, 0x02	; 2
 228:	60 ec       	ldi	r22, 0xC0	; 192
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	38 d1       	rcall	.+624    	; 0x49e <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
 22e:	e2 ee       	ldi	r30, 0xE2	; 226
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	84 60       	ori	r24, 0x04	; 4
 236:	80 83       	st	Z, r24
 238:	08 95       	ret

0000023a <main>:
	Endpoint_ConfigureEndpoint(XC_OUT_EPADDR, EP_TYPE_INTERRUPT, XC_EPSIZE, 1);
	USB_Device_EnableSOFEvents();
}

int main(void)
{
 23a:	91 df       	rcall	.-222    	; 0x15e <SetupHardware>
 23c:	78 94       	sei
 23e:	fb d3       	rcall	.+2038   	; 0xa36 <USB_USBTask>
 240:	e8 df       	rcall	.-48     	; 0x212 <PAD_Task>
 242:	fd cf       	rjmp	.-6      	; 0x23e <main+0x4>

00000244 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 244:	29 2f       	mov	r18, r25
 246:	33 27       	eor	r19, r19
 248:	22 30       	cpi	r18, 0x02	; 2
 24a:	31 05       	cpc	r19, r1
 24c:	59 f0       	breq	.+22     	; 0x264 <CALLBACK_USB_GetDescriptor+0x20>
 24e:	23 30       	cpi	r18, 0x03	; 3
 250:	31 05       	cpc	r19, r1
 252:	69 f0       	breq	.+26     	; 0x26e <CALLBACK_USB_GetDescriptor+0x2a>
 254:	21 30       	cpi	r18, 0x01	; 1
 256:	31 05       	cpc	r19, r1
 258:	e9 f4       	brne	.+58     	; 0x294 <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &XbeeController_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 25a:	82 e1       	ldi	r24, 0x12	; 18
 25c:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &XbeeController_DeviceDescriptor;
 25e:	2d ec       	ldi	r18, 0xCD	; 205
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	1c c0       	rjmp	.+56     	; 0x29c <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &XbeeController_ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 264:	89 e2       	ldi	r24, 0x29	; 41
 266:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &XbeeController_DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &XbeeController_ConfigurationDescriptor;
 268:	24 ea       	ldi	r18, 0xA4	; 164
 26a:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 26c:	17 c0       	rjmp	.+46     	; 0x29c <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
 26e:	99 27       	eor	r25, r25
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	91 05       	cpc	r25, r1
 274:	49 f0       	breq	.+18     	; 0x288 <CALLBACK_USB_GetDescriptor+0x44>
 276:	28 f0       	brcs	.+10     	; 0x282 <CALLBACK_USB_GetDescriptor+0x3e>
 278:	02 97       	sbiw	r24, 0x02	; 2
 27a:	61 f4       	brne	.+24     	; 0x294 <CALLBACK_USB_GetDescriptor+0x50>
					Address = &XbeeController_ManufacturerString;
					Size    = pgm_read_byte(&XbeeController_ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &XbeeController_ProductString;
					Size    = pgm_read_byte(&XbeeController_ProductString.Header.Size);
 27c:	e4 e7       	ldi	r30, 0x74	; 116
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	05 c0       	rjmp	.+10     	; 0x28c <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &XbeeController_LanguageString;
					Size    = pgm_read_byte(&XbeeController_LanguageString.Header.Size);
 282:	e0 ea       	ldi	r30, 0xA0	; 160
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case STRING_ID_Manufacturer:
					Address = &XbeeController_ManufacturerString;
					Size    = pgm_read_byte(&XbeeController_ManufacturerString.Header.Size);
 288:	ec e8       	ldi	r30, 0x8C	; 140
 28a:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case STRING_ID_Product:
					Address = &XbeeController_ProductString;
					Size    = pgm_read_byte(&XbeeController_ProductString.Header.Size);
 28c:	84 91       	lpm	r24, Z
 28e:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &XbeeController_ManufacturerString;
					Size    = pgm_read_byte(&XbeeController_ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &XbeeController_ProductString;
 290:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&XbeeController_ProductString.Header.Size);
					break;
 292:	04 c0       	rjmp	.+8      	; 0x29c <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 29c:	fa 01       	movw	r30, r20
 29e:	31 83       	std	Z+1, r19	; 0x01
 2a0:	20 83       	st	Z, r18
	return Size;
}
 2a2:	08 95       	ret

000002a4 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 2a4:	cf 92       	push	r12
 2a6:	df 92       	push	r13
 2a8:	ef 92       	push	r14
 2aa:	ff 92       	push	r15
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	ec 01       	movw	r28, r24
 2b6:	8b 01       	movw	r16, r22
 2b8:	7a 01       	movw	r14, r20
 2ba:	43 d1       	rcall	.+646    	; 0x542 <Endpoint_WaitUntilReady>
 2bc:	81 11       	cpse	r24, r1
 2be:	33 c0       	rjmp	.+102    	; 0x326 <__stack+0x27>
 2c0:	e1 14       	cp	r14, r1
 2c2:	f1 04       	cpc	r15, r1
 2c4:	39 f0       	breq	.+14     	; 0x2d4 <Endpoint_Write_Stream_LE+0x30>
 2c6:	f7 01       	movw	r30, r14
 2c8:	80 81       	ld	r24, Z
 2ca:	91 81       	ldd	r25, Z+1	; 0x01
 2cc:	08 1b       	sub	r16, r24
 2ce:	19 0b       	sbc	r17, r25
 2d0:	c8 0f       	add	r28, r24
 2d2:	d9 1f       	adc	r29, r25
 2d4:	c1 2c       	mov	r12, r1
 2d6:	d1 2c       	mov	r13, r1
 2d8:	01 15       	cp	r16, r1
 2da:	11 05       	cpc	r17, r1
 2dc:	19 f1       	breq	.+70     	; 0x324 <__stack+0x25>
 2de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 2e2:	85 fd       	sbrc	r24, 5
 2e4:	16 c0       	rjmp	.+44     	; 0x312 <__stack+0x13>
 2e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 2ea:	8e 77       	andi	r24, 0x7E	; 126
 2ec:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 2f0:	a2 d3       	rcall	.+1860   	; 0xa36 <USB_USBTask>
 2f2:	e1 14       	cp	r14, r1
 2f4:	f1 04       	cpc	r15, r1
 2f6:	49 f0       	breq	.+18     	; 0x30a <__stack+0xb>
 2f8:	f7 01       	movw	r30, r14
 2fa:	80 81       	ld	r24, Z
 2fc:	91 81       	ldd	r25, Z+1	; 0x01
 2fe:	c8 0e       	add	r12, r24
 300:	d9 1e       	adc	r13, r25
 302:	d1 82       	std	Z+1, r13	; 0x01
 304:	c0 82       	st	Z, r12
 306:	85 e0       	ldi	r24, 0x05	; 5
 308:	0e c0       	rjmp	.+28     	; 0x326 <__stack+0x27>
 30a:	1b d1       	rcall	.+566    	; 0x542 <Endpoint_WaitUntilReady>
 30c:	88 23       	and	r24, r24
 30e:	21 f3       	breq	.-56     	; 0x2d8 <Endpoint_Write_Stream_LE+0x34>
 310:	0a c0       	rjmp	.+20     	; 0x326 <__stack+0x27>
 312:	89 91       	ld	r24, Y+
 314:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 318:	01 50       	subi	r16, 0x01	; 1
 31a:	11 09       	sbc	r17, r1
 31c:	ff ef       	ldi	r31, 0xFF	; 255
 31e:	cf 1a       	sub	r12, r31
 320:	df 0a       	sbc	r13, r31
 322:	da cf       	rjmp	.-76     	; 0x2d8 <Endpoint_Write_Stream_LE+0x34>
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	1f 91       	pop	r17
 32c:	0f 91       	pop	r16
 32e:	ff 90       	pop	r15
 330:	ef 90       	pop	r14
 332:	df 90       	pop	r13
 334:	cf 90       	pop	r12
 336:	08 95       	ret

00000338 <Endpoint_Write_Control_Stream_LE>:
 338:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <USB_ControlRequest+0x6>
 33c:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <USB_ControlRequest+0x7>
 340:	26 17       	cp	r18, r22
 342:	37 07       	cpc	r19, r23
 344:	48 f0       	brcs	.+18     	; 0x358 <Endpoint_Write_Control_Stream_LE+0x20>
 346:	61 15       	cp	r22, r1
 348:	71 05       	cpc	r23, r1
 34a:	39 f4       	brne	.+14     	; 0x35a <Endpoint_Write_Control_Stream_LE+0x22>
 34c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 350:	2e 77       	andi	r18, 0x7E	; 126
 352:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 356:	01 c0       	rjmp	.+2      	; 0x35a <Endpoint_Write_Control_Stream_LE+0x22>
 358:	b9 01       	movw	r22, r18
 35a:	fc 01       	movw	r30, r24
 35c:	20 e0       	ldi	r18, 0x00	; 0
 35e:	61 15       	cp	r22, r1
 360:	71 05       	cpc	r23, r1
 362:	59 f1       	breq	.+86     	; 0x3ba <Endpoint_Write_Control_Stream_LE+0x82>
 364:	8e b3       	in	r24, 0x1e	; 30
 366:	88 23       	and	r24, r24
 368:	d1 f1       	breq	.+116    	; 0x3de <Endpoint_Write_Control_Stream_LE+0xa6>
 36a:	85 30       	cpi	r24, 0x05	; 5
 36c:	d1 f1       	breq	.+116    	; 0x3e2 <Endpoint_Write_Control_Stream_LE+0xaa>
 36e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 372:	83 fd       	sbrc	r24, 3
 374:	38 c0       	rjmp	.+112    	; 0x3e6 <Endpoint_Write_Control_Stream_LE+0xae>
 376:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 37a:	82 fd       	sbrc	r24, 2
 37c:	2a c0       	rjmp	.+84     	; 0x3d2 <Endpoint_Write_Control_Stream_LE+0x9a>
 37e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 382:	80 ff       	sbrs	r24, 0
 384:	ec cf       	rjmp	.-40     	; 0x35e <Endpoint_Write_Control_Stream_LE+0x26>
 386:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	61 15       	cp	r22, r1
 38e:	71 05       	cpc	r23, r1
 390:	51 f0       	breq	.+20     	; 0x3a6 <Endpoint_Write_Control_Stream_LE+0x6e>
 392:	88 30       	cpi	r24, 0x08	; 8
 394:	91 05       	cpc	r25, r1
 396:	38 f4       	brcc	.+14     	; 0x3a6 <Endpoint_Write_Control_Stream_LE+0x6e>
 398:	21 91       	ld	r18, Z+
 39a:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 39e:	61 50       	subi	r22, 0x01	; 1
 3a0:	71 09       	sbc	r23, r1
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	f3 cf       	rjmp	.-26     	; 0x38c <Endpoint_Write_Control_Stream_LE+0x54>
 3a6:	21 e0       	ldi	r18, 0x01	; 1
 3a8:	08 97       	sbiw	r24, 0x08	; 8
 3aa:	09 f0       	breq	.+2      	; 0x3ae <Endpoint_Write_Control_Stream_LE+0x76>
 3ac:	20 e0       	ldi	r18, 0x00	; 0
 3ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 3b2:	8e 77       	andi	r24, 0x7E	; 126
 3b4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 3b8:	d2 cf       	rjmp	.-92     	; 0x35e <Endpoint_Write_Control_Stream_LE+0x26>
 3ba:	21 11       	cpse	r18, r1
 3bc:	d3 cf       	rjmp	.-90     	; 0x364 <Endpoint_Write_Control_Stream_LE+0x2c>
 3be:	09 c0       	rjmp	.+18     	; 0x3d2 <Endpoint_Write_Control_Stream_LE+0x9a>
 3c0:	8e b3       	in	r24, 0x1e	; 30
 3c2:	88 23       	and	r24, r24
 3c4:	61 f0       	breq	.+24     	; 0x3de <Endpoint_Write_Control_Stream_LE+0xa6>
 3c6:	85 30       	cpi	r24, 0x05	; 5
 3c8:	61 f0       	breq	.+24     	; 0x3e2 <Endpoint_Write_Control_Stream_LE+0xaa>
 3ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 3ce:	83 fd       	sbrc	r24, 3
 3d0:	0a c0       	rjmp	.+20     	; 0x3e6 <Endpoint_Write_Control_Stream_LE+0xae>
 3d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 3d6:	82 ff       	sbrs	r24, 2
 3d8:	f3 cf       	rjmp	.-26     	; 0x3c0 <Endpoint_Write_Control_Stream_LE+0x88>
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	08 95       	ret
 3de:	82 e0       	ldi	r24, 0x02	; 2
 3e0:	08 95       	ret
 3e2:	83 e0       	ldi	r24, 0x03	; 3
 3e4:	08 95       	ret
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	08 95       	ret

000003ea <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 3ea:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <USB_ControlRequest+0x6>
 3ee:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <USB_ControlRequest+0x7>
 3f2:	26 17       	cp	r18, r22
 3f4:	37 07       	cpc	r19, r23
 3f6:	48 f0       	brcs	.+18     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 3f8:	61 15       	cp	r22, r1
 3fa:	71 05       	cpc	r23, r1
 3fc:	39 f4       	brne	.+14     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 3fe:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 402:	2e 77       	andi	r18, 0x7E	; 126
 404:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 408:	01 c0       	rjmp	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	b9 01       	movw	r22, r18
 40c:	fc 01       	movw	r30, r24
 40e:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 410:	61 15       	cp	r22, r1
 412:	71 05       	cpc	r23, r1
 414:	61 f1       	breq	.+88     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 416:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 418:	88 23       	and	r24, r24
 41a:	d9 f1       	breq	.+118    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 41c:	85 30       	cpi	r24, 0x05	; 5
 41e:	d9 f1       	breq	.+118    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 420:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 424:	83 fd       	sbrc	r24, 3
 426:	39 c0       	rjmp	.+114    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 428:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 42c:	82 fd       	sbrc	r24, 2
 42e:	2b c0       	rjmp	.+86     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 430:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  break;

		if (Endpoint_IsINReady())
 434:	80 ff       	sbrs	r24, 0
 436:	ec cf       	rjmp	.-40     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 438:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 43c:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 43e:	61 15       	cp	r22, r1
 440:	71 05       	cpc	r23, r1
 442:	59 f0       	breq	.+22     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 444:	88 30       	cpi	r24, 0x08	; 8
 446:	91 05       	cpc	r25, r1
 448:	40 f4       	brcc	.+16     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 44a:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 44c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 450:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 452:	61 50       	subi	r22, 0x01	; 1
 454:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 456:	01 96       	adiw	r24, 0x01	; 1
 458:	f2 cf       	rjmp	.-28     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 45a:	21 e0       	ldi	r18, 0x01	; 1
 45c:	08 97       	sbiw	r24, 0x08	; 8
 45e:	09 f0       	breq	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 460:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 462:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 466:	8e 77       	andi	r24, 0x7E	; 126
 468:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 46c:	d1 cf       	rjmp	.-94     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 46e:	21 11       	cpse	r18, r1
 470:	d2 cf       	rjmp	.-92     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 472:	09 c0       	rjmp	.+18     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 474:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 476:	88 23       	and	r24, r24
 478:	61 f0       	breq	.+24     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 47a:	85 30       	cpi	r24, 0x05	; 5
 47c:	61 f0       	breq	.+24     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 47e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 482:	83 fd       	sbrc	r24, 3
 484:	0a c0       	rjmp	.+20     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 486:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 48a:	82 ff       	sbrs	r24, 2
 48c:	f3 cf       	rjmp	.-26     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 492:	82 e0       	ldi	r24, 0x02	; 2
 494:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 496:	83 e0       	ldi	r24, 0x03	; 3
 498:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 49a:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 49c:	08 95       	ret

0000049e <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 49e:	98 2f       	mov	r25, r24
 4a0:	95 30       	cpi	r25, 0x05	; 5
 4a2:	68 f5       	brcc	.+90     	; 0x4fe <Endpoint_ConfigureEndpoint_Prv+0x60>
 4a4:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 4a8:	98 17       	cp	r25, r24
 4aa:	39 f0       	breq	.+14     	; 0x4ba <Endpoint_ConfigureEndpoint_Prv+0x1c>
 4ac:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 4b0:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 4b4:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <Endpoint_ConfigureEndpoint_Prv+0x22>
 4ba:	24 2f       	mov	r18, r20
 4bc:	76 2f       	mov	r23, r22
 4be:	50 e0       	ldi	r21, 0x00	; 0
 4c0:	21 fd       	sbrc	r18, 1
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <Endpoint_ConfigureEndpoint_Prv+0x2a>
 4c4:	9f 5f       	subi	r25, 0xFF	; 255
 4c6:	ec cf       	rjmp	.-40     	; 0x4a0 <Endpoint_ConfigureEndpoint_Prv+0x2>
 4c8:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 4cc:	3e 7f       	andi	r19, 0xFE	; 254
 4ce:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 4d2:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 4d6:	3d 7f       	andi	r19, 0xFD	; 253
 4d8:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 4dc:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 4e0:	31 60       	ori	r19, 0x01	; 1
 4e2:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 4e6:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 4ea:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 4ee:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 4f2:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>
 4f6:	27 fd       	sbrc	r18, 7
 4f8:	e5 cf       	rjmp	.-54     	; 0x4c4 <Endpoint_ConfigureEndpoint_Prv+0x26>
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	08 95       	ret
 4fe:	8f 70       	andi	r24, 0x0F	; 15
 500:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	08 95       	ret

00000508 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 508:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest>
 50c:	87 ff       	sbrs	r24, 7
 50e:	0f c0       	rjmp	.+30     	; 0x52e <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 510:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 514:	82 fd       	sbrc	r24, 2
 516:	04 c0       	rjmp	.+8      	; 0x520 <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 518:	8e b3       	in	r24, 0x1e	; 30
 51a:	81 11       	cpse	r24, r1
 51c:	f9 cf       	rjmp	.-14     	; 0x510 <Endpoint_ClearStatusStage+0x8>
 51e:	10 c0       	rjmp	.+32     	; 0x540 <Endpoint_ClearStatusStage+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 520:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 524:	8b 77       	andi	r24, 0x7B	; 123
 526:	0a c0       	rjmp	.+20     	; 0x53c <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 528:	8e b3       	in	r24, 0x1e	; 30
 52a:	88 23       	and	r24, r24
 52c:	49 f0       	breq	.+18     	; 0x540 <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 52e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 532:	80 ff       	sbrs	r24, 0
 534:	f9 cf       	rjmp	.-14     	; 0x528 <Endpoint_ClearStatusStage+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 536:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 53a:	8e 77       	andi	r24, 0x7E	; 126
 53c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 540:	08 95       	ret

00000542 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 542:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
 546:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
 54a:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 54c:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 550:	84 2f       	mov	r24, r20
 552:	81 70       	andi	r24, 0x01	; 1
 554:	40 ff       	sbrs	r20, 0
 556:	22 c0       	rjmp	.+68     	; 0x59c <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 558:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 55c:	80 fd       	sbrc	r24, 0
 55e:	1c c0       	rjmp	.+56     	; 0x598 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 560:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 562:	88 23       	and	r24, r24
 564:	99 f0       	breq	.+38     	; 0x58c <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 566:	85 30       	cpi	r24, 0x05	; 5
 568:	99 f0       	breq	.+38     	; 0x590 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 56a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 56e:	85 fd       	sbrc	r24, 5
 570:	11 c0       	rjmp	.+34     	; 0x594 <Endpoint_WaitUntilReady+0x52>
 572:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
 576:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 57a:	24 17       	cp	r18, r20
 57c:	35 07       	cpc	r19, r21
 57e:	31 f3       	breq	.-52     	; 0x54c <Endpoint_WaitUntilReady+0xa>
 580:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 582:	11 f0       	breq	.+4      	; 0x588 <Endpoint_WaitUntilReady+0x46>
 584:	9a 01       	movw	r18, r20
 586:	e2 cf       	rjmp	.-60     	; 0x54c <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 588:	84 e0       	ldi	r24, 0x04	; 4
 58a:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 58c:	82 e0       	ldi	r24, 0x02	; 2
 58e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 590:	83 e0       	ldi	r24, 0x03	; 3
 592:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 59c:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 5a0:	42 ff       	sbrs	r20, 2
 5a2:	de cf       	rjmp	.-68     	; 0x560 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 5a4:	08 95       	ret

000005a6 <USB_ResetInterface>:
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
 5a6:	40 d0       	rcall	.+128    	; 0x628 <USB_INT_DisableAllInterrupts>
 5a8:	42 d0       	rcall	.+132    	; 0x62e <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 5aa:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 5ae:	8f 77       	andi	r24, 0x7F	; 127
 5b0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON |=  (1 << USBE);
 5b4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 5b8:	80 68       	ori	r24, 0x80	; 128
 5ba:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 5be:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 5c2:	8f 7d       	andi	r24, 0xDF	; 223
 5c4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 5c8:	84 e0       	ldi	r24, 0x04	; 4
 5ca:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 5cc:	86 e0       	ldi	r24, 0x06	; 6
 5ce:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 5d0:	09 b4       	in	r0, 0x29	; 41
 5d2:	00 fe       	sbrs	r0, 0
 5d4:	fd cf       	rjmp	.-6      	; 0x5d0 <USB_ResetInterface+0x2a>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 5d6:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
 5d8:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 5dc:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 5e0:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <USB_Device_CurrentlySelfPowered>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 5e4:	42 e0       	ldi	r20, 0x02	; 2
 5e6:	60 e0       	ldi	r22, 0x00	; 0
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	59 df       	rcall	.-334    	; 0x49e <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 5ec:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 5f0:	8e 7f       	andi	r24, 0xFE	; 254
 5f2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 5f6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 5fa:	81 60       	ori	r24, 0x01	; 1
 5fc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 600:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 604:	88 60       	ori	r24, 0x08	; 8
 606:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 60a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
 60e:	8e 7f       	andi	r24, 0xFE	; 254
 610:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
 614:	08 95       	ret

00000616 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
 616:	e3 e6       	ldi	r30, 0x63	; 99
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	8e 7f       	andi	r24, 0xFE	; 254
 61e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <USB_IsInitialized>
 626:	bf cf       	rjmp	.-130    	; 0x5a6 <USB_ResetInterface>

00000628 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 628:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 62c:	08 95       	ret

0000062e <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 62e:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 632:	08 95       	ret

00000634 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 634:	1f 92       	push	r1
 636:	0f 92       	push	r0
 638:	0f b6       	in	r0, 0x3f	; 63
 63a:	0f 92       	push	r0
 63c:	11 24       	eor	r1, r1
 63e:	2f 93       	push	r18
 640:	3f 93       	push	r19
 642:	4f 93       	push	r20
 644:	5f 93       	push	r21
 646:	6f 93       	push	r22
 648:	7f 93       	push	r23
 64a:	8f 93       	push	r24
 64c:	9f 93       	push	r25
 64e:	af 93       	push	r26
 650:	bf 93       	push	r27
 652:	ef 93       	push	r30
 654:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 656:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 65a:	82 ff       	sbrs	r24, 2
 65c:	0a c0       	rjmp	.+20     	; 0x672 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 65e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 662:	82 ff       	sbrs	r24, 2
 664:	06 c0       	rjmp	.+12     	; 0x672 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 666:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 66a:	8b 7f       	andi	r24, 0xFB	; 251
 66c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 670:	e1 d1       	rcall	.+962    	; 0xa34 <USB_Event_Stub>
 672:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 676:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 678:	16 c0       	rjmp	.+44     	; 0x6a6 <__vector_11+0x72>
 67a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 67e:	80 ff       	sbrs	r24, 0
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 680:	12 c0       	rjmp	.+36     	; 0x6a6 <__vector_11+0x72>
 682:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 686:	8e 7f       	andi	r24, 0xFE	; 254
 688:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 68c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 690:	80 61       	ori	r24, 0x10	; 16
 692:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 696:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 69a:	80 62       	ori	r24, 0x20	; 32
 69c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
 6a0:	19 bc       	out	0x29, r1	; 41
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 6a2:	1e ba       	out	0x1e, r1	; 30
 6a4:	c7 d1       	rcall	.+910    	; 0xa34 <USB_Event_Stub>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 6a6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 6aa:	84 ff       	sbrs	r24, 4
 6ac:	2e c0       	rjmp	.+92     	; 0x70a <__vector_11+0xd6>
 6ae:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 6b2:	84 ff       	sbrs	r24, 4
 6b4:	2a c0       	rjmp	.+84     	; 0x70a <__vector_11+0xd6>
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 6b6:	84 e0       	ldi	r24, 0x04	; 4
 6b8:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 6ba:	86 e0       	ldi	r24, 0x06	; 6
 6bc:	89 bd       	out	0x29, r24	; 41
 6be:	09 b4       	in	r0, 0x29	; 41
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 6c0:	00 fe       	sbrs	r0, 0
 6c2:	fd cf       	rjmp	.-6      	; 0x6be <__vector_11+0x8a>
 6c4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 6c8:	8f 7d       	andi	r24, 0xDF	; 223
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 6ca:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 6ce:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 6d2:	8f 7e       	andi	r24, 0xEF	; 239
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 6d4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 6d8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 6dc:	8f 7e       	andi	r24, 0xEF	; 239
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 6de:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 6e2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 6e6:	81 60       	ori	r24, 0x01	; 1
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 6e8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 6ec:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_Device_ConfigurationNumber>
		  USB_DeviceState = DEVICE_STATE_Configured;
 6f0:	88 23       	and	r24, r24
 6f2:	11 f0       	breq	.+4      	; 0x6f8 <__vector_11+0xc4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 6f4:	84 e0       	ldi	r24, 0x04	; 4
 6f6:	07 c0       	rjmp	.+14     	; 0x706 <__vector_11+0xd2>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 6f8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 6fc:	87 fd       	sbrc	r24, 7
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <__vector_11+0xd0>
 700:	81 e0       	ldi	r24, 0x01	; 1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 702:	01 c0       	rjmp	.+2      	; 0x706 <__vector_11+0xd2>
 704:	83 e0       	ldi	r24, 0x03	; 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 706:	8e bb       	out	0x1e, r24	; 30
 708:	95 d1       	rcall	.+810    	; 0xa34 <USB_Event_Stub>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 70a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 70e:	83 ff       	sbrs	r24, 3
 710:	21 c0       	rjmp	.+66     	; 0x754 <__vector_11+0x120>
 712:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 716:	83 ff       	sbrs	r24, 3
 718:	1d c0       	rjmp	.+58     	; 0x754 <__vector_11+0x120>
 71a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 71e:	87 7f       	andi	r24, 0xF7	; 247
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 720:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		USB_Device_ConfigurationNumber = 0;
 724:	82 e0       	ldi	r24, 0x02	; 2
 726:	8e bb       	out	0x1e, r24	; 30
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 728:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <USB_Device_ConfigurationNumber>
 72c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 730:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 732:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 736:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 73a:	8e 7f       	andi	r24, 0xFE	; 254
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 73c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 740:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 744:	80 61       	ori	r24, 0x10	; 16
 746:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 74a:	42 e0       	ldi	r20, 0x02	; 2
 74c:	60 e0       	ldi	r22, 0x00	; 0
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 74e:	80 e0       	ldi	r24, 0x00	; 0
 750:	a6 de       	rcall	.-692    	; 0x49e <Endpoint_ConfigureEndpoint_Prv>
 752:	70 d1       	rcall	.+736    	; 0xa34 <USB_Event_Stub>
 754:	ff 91       	pop	r31
 756:	ef 91       	pop	r30
 758:	bf 91       	pop	r27
 75a:	af 91       	pop	r26
 75c:	9f 91       	pop	r25
 75e:	8f 91       	pop	r24
 760:	7f 91       	pop	r23
 762:	6f 91       	pop	r22
 764:	5f 91       	pop	r21
 766:	4f 91       	pop	r20
 768:	3f 91       	pop	r19
 76a:	2f 91       	pop	r18
 76c:	0f 90       	pop	r0
 76e:	0f be       	out	0x3f, r0	; 63
 770:	0f 90       	pop	r0
 772:	1f 90       	pop	r1
 774:	18 95       	reti

00000776 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 776:	1f 93       	push	r17
 778:	cf 93       	push	r28
 77a:	df 93       	push	r29
 77c:	cd b7       	in	r28, 0x3d	; 61
 77e:	de b7       	in	r29, 0x3e	; 62
 780:	aa 97       	sbiw	r28, 0x2a	; 42
 782:	0f b6       	in	r0, 0x3f	; 63
 784:	f8 94       	cli
 786:	de bf       	out	0x3e, r29	; 62
 788:	0f be       	out	0x3f, r0	; 63
 78a:	cd bf       	out	0x3d, r28	; 61
 78c:	eb e1       	ldi	r30, 0x1B	; 27
 78e:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 790:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 794:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 796:	21 e0       	ldi	r18, 0x01	; 1
 798:	e3 32       	cpi	r30, 0x23	; 35
 79a:	f2 07       	cpc	r31, r18
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 79c:	c9 f7       	brne	.-14     	; 0x790 <USB_Device_ProcessControlRequest+0x1a>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 79e:	4a d1       	rcall	.+660    	; 0xa34 <USB_Event_Stub>
 7a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	if (Endpoint_IsSETUPReceived())
 7a4:	83 ff       	sbrs	r24, 3
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 7a6:	2e c1       	rjmp	.+604    	; 0xa04 <USB_Device_ProcessControlRequest+0x28e>
 7a8:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 7ac:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <USB_ControlRequest+0x1>
 7b0:	95 30       	cpi	r25, 0x05	; 5
 7b2:	09 f4       	brne	.+2      	; 0x7b6 <USB_Device_ProcessControlRequest+0x40>
 7b4:	83 c0       	rjmp	.+262    	; 0x8bc <USB_Device_ProcessControlRequest+0x146>
 7b6:	30 f4       	brcc	.+12     	; 0x7c4 <USB_Device_ProcessControlRequest+0x4e>
 7b8:	91 30       	cpi	r25, 0x01	; 1
 7ba:	a9 f1       	breq	.+106    	; 0x826 <USB_Device_ProcessControlRequest+0xb0>
 7bc:	68 f0       	brcs	.+26     	; 0x7d8 <USB_Device_ProcessControlRequest+0x62>
 7be:	93 30       	cpi	r25, 0x03	; 3
 7c0:	91 f1       	breq	.+100    	; 0x826 <USB_Device_ProcessControlRequest+0xb0>
 7c2:	20 c1       	rjmp	.+576    	; 0xa04 <USB_Device_ProcessControlRequest+0x28e>
 7c4:	98 30       	cpi	r25, 0x08	; 8
 7c6:	09 f4       	brne	.+2      	; 0x7ca <USB_Device_ProcessControlRequest+0x54>
 7c8:	ee c0       	rjmp	.+476    	; 0x9a6 <USB_Device_ProcessControlRequest+0x230>
 7ca:	99 30       	cpi	r25, 0x09	; 9
 7cc:	09 f4       	brne	.+2      	; 0x7d0 <USB_Device_ProcessControlRequest+0x5a>
 7ce:	fa c0       	rjmp	.+500    	; 0x9c4 <USB_Device_ProcessControlRequest+0x24e>
 7d0:	96 30       	cpi	r25, 0x06	; 6
 7d2:	09 f0       	breq	.+2      	; 0x7d6 <USB_Device_ProcessControlRequest+0x60>
 7d4:	17 c1       	rjmp	.+558    	; 0xa04 <USB_Device_ProcessControlRequest+0x28e>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 7d6:	93 c0       	rjmp	.+294    	; 0x8fe <USB_Device_ProcessControlRequest+0x188>
 7d8:	80 38       	cpi	r24, 0x80	; 128
 7da:	21 f0       	breq	.+8      	; 0x7e4 <USB_Device_ProcessControlRequest+0x6e>
 7dc:	82 38       	cpi	r24, 0x82	; 130
 7de:	09 f0       	breq	.+2      	; 0x7e2 <USB_Device_ProcessControlRequest+0x6c>
 7e0:	11 c1       	rjmp	.+546    	; 0xa04 <USB_Device_ProcessControlRequest+0x28e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 7e2:	08 c0       	rjmp	.+16     	; 0x7f4 <USB_Device_ProcessControlRequest+0x7e>
 7e4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 7e8:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <USB_Device_RemoteWakeupEnabled>
 7ec:	99 23       	and	r25, r25
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 7ee:	89 f0       	breq	.+34     	; 0x812 <USB_Device_ProcessControlRequest+0x9c>
 7f0:	82 60       	ori	r24, 0x02	; 2
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 7f2:	0f c0       	rjmp	.+30     	; 0x812 <USB_Device_ProcessControlRequest+0x9c>
 7f4:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <USB_ControlRequest+0x4>

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 7f8:	8f 70       	andi	r24, 0x0F	; 15
 7fa:	85 30       	cpi	r24, 0x05	; 5
 7fc:	08 f0       	brcs	.+2      	; 0x800 <USB_Device_ProcessControlRequest+0x8a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 7fe:	02 c1       	rjmp	.+516    	; 0xa04 <USB_Device_ProcessControlRequest+0x28e>
 800:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 804:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
 808:	85 fb       	bst	r24, 5
 80a:	88 27       	eor	r24, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 80c:	80 f9       	bld	r24, 0
 80e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 812:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 816:	97 7f       	andi	r25, 0xF7	; 247
 818:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 81c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
 820:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 824:	cb c0       	rjmp	.+406    	; 0x9bc <USB_Device_ProcessControlRequest+0x246>
 826:	28 2f       	mov	r18, r24
 828:	2d 7f       	andi	r18, 0xFD	; 253
 82a:	09 f0       	breq	.+2      	; 0x82e <USB_Device_ProcessControlRequest+0xb8>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 82c:	eb c0       	rjmp	.+470    	; 0xa04 <USB_Device_ProcessControlRequest+0x28e>
 82e:	88 23       	and	r24, r24
 830:	19 f0       	breq	.+6      	; 0x838 <USB_Device_ProcessControlRequest+0xc2>
 832:	82 30       	cpi	r24, 0x02	; 2
 834:	61 f0       	breq	.+24     	; 0x84e <USB_Device_ProcessControlRequest+0xd8>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 836:	e6 c0       	rjmp	.+460    	; 0xa04 <USB_Device_ProcessControlRequest+0x28e>
 838:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
 83c:	81 30       	cpi	r24, 0x01	; 1
 83e:	09 f0       	breq	.+2      	; 0x842 <USB_Device_ProcessControlRequest+0xcc>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 840:	e1 c0       	rjmp	.+450    	; 0xa04 <USB_Device_ProcessControlRequest+0x28e>
 842:	93 30       	cpi	r25, 0x03	; 3
 844:	09 f0       	breq	.+2      	; 0x848 <USB_Device_ProcessControlRequest+0xd2>
 846:	80 e0       	ldi	r24, 0x00	; 0
 848:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <USB_Device_RemoteWakeupEnabled>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 84c:	2e c0       	rjmp	.+92     	; 0x8aa <USB_Device_ProcessControlRequest+0x134>
 84e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
 852:	81 11       	cpse	r24, r1
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 854:	2a c0       	rjmp	.+84     	; 0x8aa <USB_Device_ProcessControlRequest+0x134>
 856:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <USB_ControlRequest+0x4>

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 85a:	8f 70       	andi	r24, 0x0F	; 15
 85c:	2f ef       	ldi	r18, 0xFF	; 255
 85e:	28 0f       	add	r18, r24
 860:	24 30       	cpi	r18, 0x04	; 4
 862:	08 f0       	brcs	.+2      	; 0x866 <USB_Device_ProcessControlRequest+0xf0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 864:	cf c0       	rjmp	.+414    	; 0xa04 <USB_Device_ProcessControlRequest+0x28e>
 866:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 86a:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 86e:	20 ff       	sbrs	r18, 0
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 870:	1c c0       	rjmp	.+56     	; 0x8aa <USB_Device_ProcessControlRequest+0x134>
 872:	93 30       	cpi	r25, 0x03	; 3
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 874:	21 f4       	brne	.+8      	; 0x87e <USB_Device_ProcessControlRequest+0x108>
 876:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 87a:	80 62       	ori	r24, 0x20	; 32
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 87c:	14 c0       	rjmp	.+40     	; 0x8a6 <USB_Device_ProcessControlRequest+0x130>
 87e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 882:	90 61       	ori	r25, 0x10	; 16
 884:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 888:	21 e0       	ldi	r18, 0x01	; 1
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	a9 01       	movw	r20, r18
 88e:	02 c0       	rjmp	.+4      	; 0x894 <USB_Device_ProcessControlRequest+0x11e>
 890:	44 0f       	add	r20, r20
 892:	55 1f       	adc	r21, r21
 894:	8a 95       	dec	r24
 896:	e2 f7       	brpl	.-8      	; 0x890 <USB_Device_ProcessControlRequest+0x11a>
 898:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UERST = 0;
 89c:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 8a0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 8a4:	88 60       	ori	r24, 0x08	; 8
 8a6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 8aa:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 8ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 8b2:	87 7f       	andi	r24, 0xF7	; 247

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 8b4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 8b8:	27 de       	rcall	.-946    	; 0x508 <Endpoint_ClearStatusStage>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 8ba:	a4 c0       	rjmp	.+328    	; 0xa04 <USB_Device_ProcessControlRequest+0x28e>
 8bc:	81 11       	cpse	r24, r1
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 8be:	a2 c0       	rjmp	.+324    	; 0xa04 <USB_Device_ProcessControlRequest+0x28e>
 8c0:	10 91 1d 01 	lds	r17, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 8c4:	1f 77       	andi	r17, 0x7F	; 127
 8c6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 8ca:	80 78       	andi	r24, 0x80	; 128
 8cc:	81 2b       	or	r24, r17
 8ce:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 8d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 8d6:	87 7f       	andi	r24, 0xF7	; 247

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 8d8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 8dc:	15 de       	rcall	.-982    	; 0x508 <Endpoint_ClearStatusStage>
 8de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	while (!(Endpoint_IsINReady()));
 8e2:	80 ff       	sbrs	r24, 0
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 8e4:	fc cf       	rjmp	.-8      	; 0x8de <USB_Device_ProcessControlRequest+0x168>
 8e6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 8ea:	80 68       	ori	r24, 0x80	; 128
 8ec:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 8f0:	11 11       	cpse	r17, r1
 8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <USB_Device_ProcessControlRequest+0x182>
 8f4:	82 e0       	ldi	r24, 0x02	; 2
 8f6:	01 c0       	rjmp	.+2      	; 0x8fa <USB_Device_ProcessControlRequest+0x184>
 8f8:	83 e0       	ldi	r24, 0x03	; 3
 8fa:	8e bb       	out	0x1e, r24	; 30
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 8fc:	83 c0       	rjmp	.+262    	; 0xa04 <USB_Device_ProcessControlRequest+0x28e>
 8fe:	80 58       	subi	r24, 0x80	; 128
 900:	82 30       	cpi	r24, 0x02	; 2
 902:	08 f0       	brcs	.+2      	; 0x906 <USB_Device_ProcessControlRequest+0x190>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 904:	7f c0       	rjmp	.+254    	; 0xa04 <USB_Device_ProcessControlRequest+0x28e>
 906:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
 90a:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <USB_ControlRequest+0x3>
 90e:	8c 3d       	cpi	r24, 0xDC	; 220
 910:	53 e0       	ldi	r21, 0x03	; 3
 912:	95 07       	cpc	r25, r21
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 914:	71 f5       	brne	.+92     	; 0x972 <USB_Device_ProcessControlRequest+0x1fc>
 916:	83 e0       	ldi	r24, 0x03	; 3
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 918:	8a 83       	std	Y+2, r24	; 0x02
 91a:	8a e2       	ldi	r24, 0x2A	; 42
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 91c:	89 83       	std	Y+1, r24	; 0x01
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 91e:	4f b7       	in	r20, 0x3f	; 63
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 920:	f8 94       	cli
 922:	de 01       	movw	r26, r28
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 924:	13 96       	adiw	r26, 0x03	; 3
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 926:	20 e0       	ldi	r18, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 928:	3e e0       	ldi	r19, 0x0E	; 14
 92a:	51 e2       	ldi	r21, 0x21	; 33
 92c:	e3 2f       	mov	r30, r19
 92e:	f0 e0       	ldi	r31, 0x00	; 0
 930:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>

					if (SerialCharNum & 0x01)
 934:	e4 91       	lpm	r30, Z
 936:	20 ff       	sbrs	r18, 0
					{
						SerialByte >>= 4;
 938:	03 c0       	rjmp	.+6      	; 0x940 <USB_Device_ProcessControlRequest+0x1ca>
 93a:	e2 95       	swap	r30
						SigReadAddress++;
 93c:	ef 70       	andi	r30, 0x0F	; 15
					}

					SerialByte &= 0x0F;
 93e:	3f 5f       	subi	r19, 0xFF	; 255
 940:	ef 70       	andi	r30, 0x0F	; 15
 942:	8e 2f       	mov	r24, r30

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	ea 30       	cpi	r30, 0x0A	; 10
 948:	10 f0       	brcs	.+4      	; 0x94e <USB_Device_ProcessControlRequest+0x1d8>
 94a:	c7 96       	adiw	r24, 0x37	; 55
 94c:	01 c0       	rjmp	.+2      	; 0x950 <USB_Device_ProcessControlRequest+0x1da>
 94e:	c0 96       	adiw	r24, 0x30	; 48
 950:	8d 93       	st	X+, r24
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 952:	9d 93       	st	X+, r25
 954:	2f 5f       	subi	r18, 0xFF	; 255
 956:	24 31       	cpi	r18, 0x14	; 20
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 958:	49 f7       	brne	.-46     	; 0x92c <USB_Device_ProcessControlRequest+0x1b6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 95a:	4f bf       	out	0x3f, r20	; 63
 95c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 960:	87 7f       	andi	r24, 0xF7	; 247
 962:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 966:	6a e2       	ldi	r22, 0x2A	; 42
 968:	70 e0       	ldi	r23, 0x00	; 0
 96a:	ce 01       	movw	r24, r28
 96c:	01 96       	adiw	r24, 0x01	; 1
 96e:	e4 dc       	rcall	.-1592   	; 0x338 <Endpoint_Write_Control_Stream_LE>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 970:	14 c0       	rjmp	.+40     	; 0x99a <USB_Device_ProcessControlRequest+0x224>
 972:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <USB_ControlRequest+0x4>
 976:	70 91 20 01 	lds	r23, 0x0120	; 0x800120 <USB_ControlRequest+0x5>
 97a:	ae 01       	movw	r20, r28
 97c:	4f 5f       	subi	r20, 0xFF	; 255
 97e:	5f 4f       	sbci	r21, 0xFF	; 255
 980:	61 dc       	rcall	.-1854   	; 0x244 <CALLBACK_USB_GetDescriptor>
 982:	bc 01       	movw	r22, r24
 984:	89 2b       	or	r24, r25
 986:	09 f4       	brne	.+2      	; 0x98a <USB_Device_ProcessControlRequest+0x214>
 988:	3d c0       	rjmp	.+122    	; 0xa04 <USB_Device_ProcessControlRequest+0x28e>
 98a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 98e:	97 7f       	andi	r25, 0xF7	; 247
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 990:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 994:	89 81       	ldd	r24, Y+1	; 0x01
 996:	9a 81       	ldd	r25, Y+2	; 0x02
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 998:	28 dd       	rcall	.-1456   	; 0x3ea <Endpoint_Write_Control_PStream_LE>
 99a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 99e:	8b 77       	andi	r24, 0x7B	; 123
 9a0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 9a4:	2f c0       	rjmp	.+94     	; 0xa04 <USB_Device_ProcessControlRequest+0x28e>
 9a6:	80 38       	cpi	r24, 0x80	; 128
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9a8:	69 f5       	brne	.+90     	; 0xa04 <USB_Device_ProcessControlRequest+0x28e>
 9aa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 9ae:	87 7f       	andi	r24, 0xF7	; 247
 9b0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 9b4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 9b8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 9bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 9c0:	8e 77       	andi	r24, 0x7E	; 126
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 9c2:	78 cf       	rjmp	.-272    	; 0x8b4 <USB_Device_ProcessControlRequest+0x13e>
 9c4:	81 11       	cpse	r24, r1
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 9c6:	1e c0       	rjmp	.+60     	; 0xa04 <USB_Device_ProcessControlRequest+0x28e>
 9c8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest+0x2>
 9cc:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <USB_ControlRequest+0x3>
 9d0:	99 27       	eor	r25, r25
 9d2:	02 97       	sbiw	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9d4:	bc f4       	brge	.+46     	; 0xa04 <USB_Device_ProcessControlRequest+0x28e>
 9d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 9da:	87 7f       	andi	r24, 0xF7	; 247
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 9dc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 9e0:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest+0x2>

	Endpoint_ClearStatusStage();
 9e4:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <USB_Device_ConfigurationNumber>

	if (USB_Device_ConfigurationNumber)
 9e8:	8f dd       	rcall	.-1250   	; 0x508 <Endpoint_ClearStatusStage>
 9ea:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_Device_ConfigurationNumber>
 9ee:	81 11       	cpse	r24, r1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 9f0:	06 c0       	rjmp	.+12     	; 0x9fe <USB_Device_ProcessControlRequest+0x288>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 9f2:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 9f6:	87 fd       	sbrc	r24, 7
 9f8:	02 c0       	rjmp	.+4      	; 0x9fe <USB_Device_ProcessControlRequest+0x288>
 9fa:	81 e0       	ldi	r24, 0x01	; 1
 9fc:	01 c0       	rjmp	.+2      	; 0xa00 <USB_Device_ProcessControlRequest+0x28a>

	EVENT_USB_Device_ConfigurationChanged();
 9fe:	84 e0       	ldi	r24, 0x04	; 4
 a00:	8e bb       	out	0x1e, r24	; 30
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a02:	0d dc       	rcall	.-2022   	; 0x21e <EVENT_USB_Device_ConfigurationChanged>
 a04:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 a08:	83 ff       	sbrs	r24, 3
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a0a:	0a c0       	rjmp	.+20     	; 0xa20 <USB_Device_ProcessControlRequest+0x2aa>
 a0c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 a10:	87 7f       	andi	r24, 0xF7	; 247
 a12:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a16:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 a1a:	80 62       	ori	r24, 0x20	; 32
 a1c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 a20:	aa 96       	adiw	r28, 0x2a	; 42
 a22:	0f b6       	in	r0, 0x3f	; 63
 a24:	f8 94       	cli
 a26:	de bf       	out	0x3e, r29	; 62
 a28:	0f be       	out	0x3f, r0	; 63
 a2a:	cd bf       	out	0x3d, r28	; 61
 a2c:	df 91       	pop	r29
 a2e:	cf 91       	pop	r28
 a30:	1f 91       	pop	r17
 a32:	08 95       	ret

00000a34 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 a34:	08 95       	ret

00000a36 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 a36:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 a38:	8e b3       	in	r24, 0x1e	; 30
 a3a:	88 23       	and	r24, r24
 a3c:	99 f0       	breq	.+38     	; 0xa64 <USB_USBTask+0x2e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 a3e:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 a42:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 a44:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 a48:	89 2f       	mov	r24, r25
 a4a:	81 70       	andi	r24, 0x01	; 1
 a4c:	90 fd       	sbrc	r25, 0
 a4e:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 a50:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a52:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a56:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();
 a5a:	83 fd       	sbrc	r24, 3
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a5c:	8c de       	rcall	.-744    	; 0x776 <USB_Device_ProcessControlRequest>
 a5e:	cf 70       	andi	r28, 0x0F	; 15
 a60:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 a64:	cf 91       	pop	r28
 a66:	08 95       	ret

00000a68 <_exit>:
 a68:	f8 94       	cli

00000a6a <__stop_program>:
 a6a:	ff cf       	rjmp	.-2      	; 0xa6a <__stop_program>
